class Polynome {
    constructor (coeff) {
        this.coeff = coeff;
    }
    calc (x) {
        let s = this.coeff[0];
        let nb_dim = this.coeff.length;
        let x_i = x;
        for (let i = 1; i < nb_dim; i++) {
            s += this.coeff[i] * x_i;
            x_i *= x;
        }
        return s;
    }
    dim() {
        return this.coeff.length;
    }
    derive () {
        let nb_dim = this.coeff.length;
        let nb_dim_final = (nb_dim - 1) || 1;
        let derive = new Array(nb_dim_final).fill(0);
        for (let i = 1; i < nb_dim; i++)
                derive[i - 1] = i * this.coeff[i];
        return new Polynome(derive);
    }
}
function sum(u, v, l1 = 1, l2 = 1) {
    let dim_u = u.dim();
    let dim_v = v.dim();
    let dim_min = Math.min(dim_u, dim_v);
    let dim_max = Math.max(dim_u, dim_v);
    let s = new Array(dim_max);
    for (let i = 0; i < dim_min; i++) s[i] = l1 * u.coeff[i] + l2 * v.coeff[i];
    for (let i = dim_min; i < dim_u; i++) s[i] = l1 * u.coeff[i];
    for (let i = dim_min; i < dim_v; i++) s[i] = l2 * v.coeff[i];
    return new Polynome(s);
}
function q(u) {
    let u_p = u.derive();
    let u_s = u_p.derive();
    return u.calc(0) ** 2 + u_p.calc(1) ** 2 + u_s.calc(2) ** 2;
}
function fv_u(v, u) {
    return q(sum(v, u)) - q(u) - q(v);
}

let u = new Polynome([5, 6, 1, 2, 3]);
let v = new Polynome([1, 2, 3, 4]);
let w = new Polynome([1, 4, 2, 1]);